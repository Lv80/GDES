// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EMPLOYEE_ODB_HXX
#define EMPLOYEE_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "employee.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/tr1/wrapper-traits.hxx>
#include <odb/tr1/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // country
  //
  template <>
  struct class_traits< ::country >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::country >
  {
    public:
    typedef ::country object_type;
    typedef ::std::tr1::shared_ptr< ::country > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // employer
  //
  template <>
  struct class_traits< ::employer >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::employer >
  {
    public:
    typedef ::employer object_type;
    typedef ::std::tr1::shared_ptr< ::employer > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // employee
  //
  template <>
  struct class_traits< ::employee >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::employee >
  {
    public:
    typedef ::employee object_type;
    typedef ::std::tr1::shared_ptr< ::employee > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // employee_name
  //
  template <>
  struct class_traits< ::employee_name >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_name >
  {
    public:
    typedef ::employee_name view_type;
    typedef ::std::tr1::shared_ptr< ::employee_name > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_count
  //
  template <>
  struct class_traits< ::employee_count >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_count >
  {
    public:
    typedef ::employee_count view_type;
    typedef ::std::tr1::shared_ptr< ::employee_count > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_employer
  //
  template <>
  struct class_traits< ::employee_employer >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_employer >
  {
    public:
    typedef ::employee_employer view_type;
    typedef ::std::tr1::shared_ptr< ::employee_employer > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employer_age
  //
  template <>
  struct class_traits< ::employer_age >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employer_age >
  {
    public:
    typedef ::employer_age view_type;
    typedef ::std::tr1::shared_ptr< ::employer_age > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_country
  //
  template <>
  struct class_traits< ::employee_country >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_country >
  {
    public:
    typedef ::employee_country view_type;
    typedef ::std::tr1::shared_ptr< ::employee_country > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_country_objects
  //
  template <>
  struct class_traits< ::employee_country_objects >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_country_objects >
  {
    public:
    typedef ::employee_country_objects view_type;
    typedef ::std::tr1::shared_ptr< ::employee_country_objects > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employer_with_employees
  //
  template <>
  struct class_traits< ::employer_with_employees >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employer_with_employees >
  {
    public:
    typedef ::employer_with_employees view_type;
    typedef ::std::tr1::shared_ptr< ::employer_with_employees > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_vacation
  //
  template <>
  struct class_traits< ::employee_vacation >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_vacation >
  {
    public:
    typedef ::employee_vacation view_type;
    typedef ::std::tr1::shared_ptr< ::employee_vacation > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_vacation1
  //
  template <>
  struct class_traits< ::employee_vacation1 >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_vacation1 >
  {
    public:
    typedef ::employee_vacation1 view_type;
    typedef ::std::tr1::shared_ptr< ::employee_vacation1 > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_vacation2
  //
  template <>
  struct class_traits< ::employee_vacation2 >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_vacation2 >
  {
    public:
    typedef ::employee_vacation2 view_type;
    typedef ::std::tr1::shared_ptr< ::employee_vacation2 > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // employee_prev_employer
  //
  template <>
  struct class_traits< ::employee_prev_employer >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::employee_prev_employer >
  {
    public:
    typedef ::employee_prev_employer view_type;
    typedef ::std::tr1::shared_ptr< ::employee_prev_employer > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // country
  //
  template <typename A>
  struct query_columns< ::country, id_sqlite, A >
  {
    // code
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    code_type_;

    static const code_type_ code;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::country, id_sqlite, A >::code_type_
  query_columns< ::country, id_sqlite, A >::
  code (A::table_name, "\"code\"", 0);

  template <typename A>
  const typename query_columns< ::country, id_sqlite, A >::name_type_
  query_columns< ::country, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::country, id_sqlite, A >:
    query_columns< ::country, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::country, id_sqlite >:
    public access::object_traits< ::country >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // code_
      //
      details::buffer code_value;
      std::size_t code_size;
      bool code_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::country, id_common >:
    public access::object_traits_impl< ::country, id_sqlite >
  {
  };

  // employer
  //
  template <typename A>
  struct query_columns< ::employer, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::employer, id_sqlite, A >::id_type_
  query_columns< ::employer, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::employer, id_sqlite, A >::name_type_
  query_columns< ::employer, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::employer, id_sqlite, A >:
    query_columns< ::employer, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::employer, id_sqlite >:
    public access::object_traits< ::employer >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::employer, id_common >:
    public access::object_traits_impl< ::employer, id_sqlite >
  {
  };

  // employee
  //
  template <typename A>
  struct pointer_query_columns< ::employee, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // first
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    first_type_;

    static const first_type_ first;

    // last
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    last_type_;

    static const last_type_ last;

    // age
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        short unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    age_type_;

    static const age_type_ age;

    // residence
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    residence_type_;

    static const residence_type_ residence;

    // nationality
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    nationality_type_;

    static const nationality_type_ nationality;

    // employed_by
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    employed_by_type_;

    static const employed_by_type_ employed_by;
  };

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::id_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::first_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  first (A::table_name, "\"first\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::last_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  last (A::table_name, "\"last\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::age_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  age (A::table_name, "\"age\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::residence_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  residence (A::table_name, "\"residence\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::nationality_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  nationality (A::table_name, "\"nationality\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_sqlite, A >::employed_by_type_
  pointer_query_columns< ::employee, id_sqlite, A >::
  employed_by (A::table_name, "\"employed_by\"", 0);

  template <>
  class access::object_traits_impl< ::employee, id_sqlite >:
    public access::object_traits< ::employee >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // first_
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last_
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;

      // age_
      //
      long long age_value;
      bool age_null;

      // residence_
      //
      details::buffer residence_value;
      std::size_t residence_size;
      bool residence_null;

      // nationality_
      //
      details::buffer nationality_value;
      std::size_t nationality_size;
      bool nationality_null;

      // employed_by_
      //
      long long employed_by_value;
      bool employed_by_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct residence_tag;
    struct nationality_tag;
    struct employed_by_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::employee, id_common >:
    public access::object_traits_impl< ::employee, id_sqlite >
  {
  };

  // employee_name
  //
  template <>
  class access::view_traits_impl< ::employee_name, id_sqlite >:
    public access::view_traits< ::employee_name >
  {
    public:
    struct image_type
    {
      // first
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_name, id_common >:
    public access::view_traits_impl< ::employee_name, id_sqlite >
  {
  };

  // employee_count
  //
  template <>
  class access::view_traits_impl< ::employee_count, id_sqlite >:
    public access::view_traits< ::employee_count >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_count, id_common >:
    public access::view_traits_impl< ::employee_count, id_sqlite >
  {
  };

  // employee_employer
  //
  template <>
  class access::view_traits_impl< ::employee_employer, id_sqlite >:
    public access::view_traits< ::employee_employer >
  {
    public:
    struct image_type
    {
      // first
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;

      // employer_name
      //
      details::buffer employer_name_value;
      std::size_t employer_name_size;
      bool employer_name_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_employer, id_common >:
    public access::view_traits_impl< ::employee_employer, id_sqlite >
  {
  };

  // employer_age
  //
  template <>
  class access::view_traits_impl< ::employer_age, id_sqlite >:
    public access::view_traits< ::employer_age >
  {
    public:
    struct image_type
    {
      // employer_name
      //
      details::buffer employer_name_value;
      std::size_t employer_name_size;
      bool employer_name_null;

      // min_age
      //
      long long min_age_value;
      bool min_age_null;

      // max_age
      //
      long long max_age_value;
      bool max_age_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employer_age, id_common >:
    public access::view_traits_impl< ::employer_age, id_sqlite >
  {
  };

  // employee_country
  //
  template <>
  class access::view_traits_impl< ::employee_country, id_sqlite >:
    public access::view_traits< ::employee_country >
  {
    public:
    struct image_type
    {
      // first
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;

      // res_country_name
      //
      details::buffer res_country_name_value;
      std::size_t res_country_name_size;
      bool res_country_name_null;

      // nat_country_name
      //
      details::buffer nat_country_name_value;
      std::size_t nat_country_name_size;
      bool nat_country_name_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    struct res_country_tag;
    struct nat_country_tag;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 4UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_country, id_common >:
    public access::view_traits_impl< ::employee_country, id_sqlite >
  {
  };

  // employee_country_objects
  //
  template <>
  class access::view_traits_impl< ::employee_country_objects, id_sqlite >:
    public access::view_traits< ::employee_country_objects >
  {
    public:
    struct image_type
    {
      // e
      //
      object_traits_impl< ::employee, id_sqlite >::image_type e_value;

      // res
      //
      object_traits_impl< ::country, id_sqlite >::image_type res_value;

      // nat
      //
      object_traits_impl< ::country, id_sqlite >::image_type nat_value;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    struct res_tag;
    struct nat_tag;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 11UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_country_objects, id_common >:
    public access::view_traits_impl< ::employee_country_objects, id_sqlite >
  {
  };

  // employer_with_employees
  //
  template <>
  class access::view_traits_impl< ::employer_with_employees, id_sqlite >:
    public access::view_traits< ::employer_with_employees >
  {
    public:
    struct image_type
    {
      // e
      //
      object_traits_impl< ::employer, id_sqlite >::image_type e_value;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employer_with_employees, id_common >:
    public access::view_traits_impl< ::employer_with_employees, id_sqlite >
  {
  };

  // employee_vacation
  //
  template <>
  class access::view_traits_impl< ::employee_vacation, id_sqlite >:
    public access::view_traits< ::employee_vacation >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // days
      //
      long long days_value;
      bool days_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_vacation, id_common >:
    public access::view_traits_impl< ::employee_vacation, id_sqlite >
  {
  };

  // employee_vacation1
  //
  template <>
  class access::view_traits_impl< ::employee_vacation1, id_sqlite >:
    public access::view_traits< ::employee_vacation1 >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // days
      //
      long long days_value;
      bool days_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_vacation1, id_common >:
    public access::view_traits_impl< ::employee_vacation1, id_sqlite >
  {
  };

  // employee_vacation2
  //
  template <>
  class access::view_traits_impl< ::employee_vacation2, id_sqlite >:
    public access::view_traits< ::employee_vacation2 >
  {
    public:
    struct image_type
    {
      // first
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;

      // days
      //
      long long days_value;
      bool days_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_vacation2, id_common >:
    public access::view_traits_impl< ::employee_vacation2, id_sqlite >
  {
  };

  // employee_prev_employer
  //
  template <>
  class access::view_traits_impl< ::employee_prev_employer, id_sqlite >:
    public access::view_traits< ::employee_prev_employer >
  {
    public:
    struct image_type
    {
      // first
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;

      // prev_employer_name
      //
      details::buffer prev_employer_name_value;
      std::size_t prev_employer_name_size;
      bool prev_employer_name_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::employee_prev_employer, id_common >:
    public access::view_traits_impl< ::employee_prev_employer, id_sqlite >
  {
  };

  // country
  //
  // employer
  //
  // employee
  //
  template <>
  struct alias_traits<
    ::country,
    id_sqlite,
    access::object_traits_impl< ::employee, id_sqlite >::residence_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::country,
    id_sqlite,
    access::object_traits_impl< ::employee, id_sqlite >::nationality_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::employer,
    id_sqlite,
    access::object_traits_impl< ::employee, id_sqlite >::employed_by_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::employee, id_sqlite >
  {
    // residence
    //
    typedef
    odb::alias_traits<
      ::country,
      id_sqlite,
      access::object_traits_impl< ::employee, id_sqlite >::residence_tag>
    residence_alias_;

    // nationality
    //
    typedef
    odb::alias_traits<
      ::country,
      id_sqlite,
      access::object_traits_impl< ::employee, id_sqlite >::nationality_tag>
    nationality_alias_;

    // employed_by
    //
    typedef
    odb::alias_traits<
      ::employer,
      id_sqlite,
      access::object_traits_impl< ::employee, id_sqlite >::employed_by_tag>
    employed_by_alias_;
  };

  template <typename A>
  struct query_columns< ::employee, id_sqlite, A >:
    query_columns_base< ::employee, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // first
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    first_type_;

    static const first_type_ first;

    // last
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    last_type_;

    static const last_type_ last;

    // age
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        short unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    age_type_;

    static const age_type_ age;

    // residence
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    residence_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::country,
        id_sqlite,
        residence_alias_ > >
    residence_pointer_type_;

    struct residence_type_: residence_pointer_type_, residence_column_type_
    {
      residence_type_ (const char* t, const char* c, const char* conv)
        : residence_column_type_ (t, c, conv)
      {
      }
    };

    static const residence_type_ residence;

    // nationality
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    nationality_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::country,
        id_sqlite,
        nationality_alias_ > >
    nationality_pointer_type_;

    struct nationality_type_: nationality_pointer_type_, nationality_column_type_
    {
      nationality_type_ (const char* t, const char* c, const char* conv)
        : nationality_column_type_ (t, c, conv)
      {
      }
    };

    static const nationality_type_ nationality;

    // employed_by
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    employed_by_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::employer,
        id_sqlite,
        employed_by_alias_ > >
    employed_by_pointer_type_;

    struct employed_by_type_: employed_by_pointer_type_, employed_by_column_type_
    {
      employed_by_type_ (const char* t, const char* c, const char* conv)
        : employed_by_column_type_ (t, c, conv)
      {
      }
    };

    static const employed_by_type_ employed_by;
  };

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::id_type_
  query_columns< ::employee, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::first_type_
  query_columns< ::employee, id_sqlite, A >::
  first (A::table_name, "\"first\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::last_type_
  query_columns< ::employee, id_sqlite, A >::
  last (A::table_name, "\"last\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::age_type_
  query_columns< ::employee, id_sqlite, A >::
  age (A::table_name, "\"age\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::residence_type_
  query_columns< ::employee, id_sqlite, A >::
  residence (A::table_name, "\"residence\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::nationality_type_
  query_columns< ::employee, id_sqlite, A >::
  nationality (A::table_name, "\"nationality\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::employed_by_type_
  query_columns< ::employee, id_sqlite, A >::
  employed_by (A::table_name, "\"employed_by\"", 0);

  // employee_name
  //
  struct access::view_traits_impl< ::employee_name, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
  {
  };

  // employee_count
  //
  struct access::view_traits_impl< ::employee_count, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
  {
  };

  // employee_employer
  //
  struct access::view_traits_impl< ::employee_employer, id_sqlite >::query_columns
  {
    // employee
    //
    typedef
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
    employee;

    // employer
    //
    typedef
    odb::pointer_query_columns<
      ::employer,
      id_sqlite,
      odb::access::object_traits_impl< ::employer, id_sqlite > >
    employer;
  };

  // employer_age
  //
  struct access::view_traits_impl< ::employer_age, id_sqlite >::query_columns
  {
    // employee
    //
    typedef
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
    employee;

    // employer
    //
    typedef
    odb::pointer_query_columns<
      ::employer,
      id_sqlite,
      odb::access::object_traits_impl< ::employer, id_sqlite > >
    employer;
  };

  // employee_country
  //
  template <>
  struct alias_traits<
    ::country,
    id_sqlite,
    access::view_traits_impl< ::employee_country, id_sqlite >::res_country_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::country,
    id_sqlite,
    access::view_traits_impl< ::employee_country, id_sqlite >::nat_country_tag>
  {
    static const char table_name[];
  };

  struct access::view_traits_impl< ::employee_country, id_sqlite >::query_columns
  {
    // employee
    //
    typedef
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
    employee;

    // res_country
    //
    typedef
    odb::pointer_query_columns<
      ::country,
      id_sqlite,
      odb::alias_traits< ::country,
        id_sqlite,
        access::view_traits_impl< ::employee_country, id_sqlite >::res_country_tag> >
    res_country;

    // nat_country
    //
    typedef
    odb::pointer_query_columns<
      ::country,
      id_sqlite,
      odb::alias_traits< ::country,
        id_sqlite,
        access::view_traits_impl< ::employee_country, id_sqlite >::nat_country_tag> >
    nat_country;
  };

  // employee_country_objects
  //
  template <>
  struct alias_traits<
    ::country,
    id_sqlite,
    access::view_traits_impl< ::employee_country_objects, id_sqlite >::res_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::country,
    id_sqlite,
    access::view_traits_impl< ::employee_country_objects, id_sqlite >::nat_tag>
  {
    static const char table_name[];
  };

  struct access::view_traits_impl< ::employee_country_objects, id_sqlite >::query_columns
  {
    // employee
    //
    typedef
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
    employee;

    // res
    //
    typedef
    odb::pointer_query_columns<
      ::country,
      id_sqlite,
      odb::alias_traits< ::country,
        id_sqlite,
        access::view_traits_impl< ::employee_country_objects, id_sqlite >::res_tag> >
    res;

    // nat
    //
    typedef
    odb::pointer_query_columns<
      ::country,
      id_sqlite,
      odb::alias_traits< ::country,
        id_sqlite,
        access::view_traits_impl< ::employee_country_objects, id_sqlite >::nat_tag> >
    nat;
  };

  // employer_with_employees
  //
  struct access::view_traits_impl< ::employer_with_employees, id_sqlite >::query_columns
  {
    // employer
    //
    typedef
    odb::pointer_query_columns<
      ::employer,
      id_sqlite,
      odb::access::object_traits_impl< ::employer, id_sqlite > >
    employer;

    // employee
    //
    typedef
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
    employee;
  };

  // employee_vacation2
  //
  struct access::view_traits_impl< ::employee_vacation2, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
  {
  };

  // employee_prev_employer
  //
  struct access::view_traits_impl< ::employee_prev_employer, id_sqlite >::query_columns
  {
    // employee
    //
    typedef
    odb::pointer_query_columns<
      ::employee,
      id_sqlite,
      odb::access::object_traits_impl< ::employee, id_sqlite > >
    employee;

    // employer
    //
    typedef
    odb::pointer_query_columns<
      ::employer,
      id_sqlite,
      odb::access::object_traits_impl< ::employer, id_sqlite > >
    employer;
  };
}

#include "employee-odb.ixx"

#include <odb/post.hxx>

#endif // EMPLOYEE_ODB_HXX
